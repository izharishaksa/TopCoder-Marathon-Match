

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 *
 * @author Izhari Ishak Aksa
 */
public class RectanglesAndHoles {

    int N, holes, baseX = -30000;
    List<Rectangle> added = new ArrayList<Rectangle>();

    boolean isOverlap(Rectangle A) {
        for (Rectangle r : added) {
            if (isOverlap(A, r)) {
                return true;
            }
        }
        return false;
    }

    boolean isOverlap(Rectangle A, Rectangle B) {
        return Math.max(A.LX, B.LX) < Math.min(A.RX, B.RX) && Math.max(A.LY, B.LY) < Math.min(A.RY, B.RY);
    }

    int[] place(int[] A, int[] B) {
        N = A.length;
        Rectangle[] rect = new Rectangle[N];
        for (int i = 0; i < N; i++) {
            rect[i] = new Rectangle(i, A[i], B[i]);
            if (rect[i].alas > rect[i].tinggi) {
                rect[i].rotate();
            }
            rect[i].setDefault();
        }
        LinkedList<Rectangle> pool = new LinkedList<Rectangle>();
        for (int i = 0; i < N; i++) {
            pool.add(rect[i]);
        }
        Collections.sort(pool, new SortByRatio());

        PriorityQueue<Rectangle> list = new PriorityQueue<Rectangle>();
        Rectangle rct = pool.poll();
        rct.setPosition(0, 0);
        rct.fixed = true;
        list.add(rct);

        List<Rectangle> temp = new ArrayList<Rectangle>();
        int batas = N, count = 0;
        added.add(rct);
        while (!pool.isEmpty()) {
            Collections.sort(pool, new SortByRatio());
            Rectangle cur = pool.poll();

            if (count >= batas) {
                list.offer(cur);
                continue;
            }

            List<Rectangle> temp2 = new ArrayList<Rectangle>();
            State state = new State(null, null, 0, -1);
            while (!list.isEmpty() && count < batas) {
                Rectangle partner = list.poll();
                if (partner.A == null || partner.B == null || partner.C == null || partner.D == null) {
                    if (partner.A == null) {
                        Rectangle ccur = new Rectangle(-1, cur.alas, cur.tinggi);
                        ccur.setPosition(partner.LX - cur.alas, partner.RY);
                        if (!isOverlap(ccur)) {
                            long score = Math.min(cur.alas, cur.tinggi);
                            if (partner.C != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.C;
                                if (partner2.A != null) {
                                    score *= Math.min(partner2.alas, partner2.tinggi);
                                    Rectangle partner3 = partner2.A;
                                }
                            }
                            if (partner.B != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.B;
                                if (partner2.A != null) {
                                    score *= Math.min(partner2.alas, partner2.tinggi);
                                    Rectangle partner3 = partner2.A;
                                }
                            }
                            //System.err.println(count + " A > " + score + " = " + partner.LX + "," + partner.LY);
                            if (score > state.score) {
                                //cur.setPosition(partner.LX - cur.alas, partner.RY);
                                cur.setPosition(ccur.LX, ccur.LY);
                                state.score = score;
                                state.node = 0;
                                state.cur = cur;
                                state.target = partner;
                            }
                        }
                    }
                    if (partner.B == null) {
                        Rectangle ccur = new Rectangle(-1, cur.alas, cur.tinggi);
                        ccur.setPosition(partner.RX, partner.RY);
                        if (!isOverlap(ccur)) {
                            long score = Math.min(cur.alas, cur.tinggi);
                            if (partner.D != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.D;
                                if (partner2.B != null) {
                                    score *= Math.min(partner2.alas, partner2.tinggi);
                                    Rectangle partner3 = partner2.B;
                                }
                            }
                            if (partner.A != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.A;
                                if (partner2.B != null) {
                                    score *= Math.min(partner2.alas, partner2.tinggi);
                                    Rectangle partner3 = partner2.B;
                                }
                            }
                            //System.err.println(count + " B > " + score + " = " + partner.LX + "," + partner.LY);
                            if (score > state.score) {
                                //cur.setPosition(partner.RX, partner.RY);
                                cur.setPosition(ccur.LX, ccur.LY);
                                state.score = score;
                                state.node = 1;
                                state.cur = cur;
                                state.target = partner;
                            }
                        }
                    }
                    if (partner.C == null) {
                        Rectangle ccur = new Rectangle(-1, cur.alas, cur.tinggi);
                        ccur.setPosition(partner.LX - cur.alas, partner.LY - cur.tinggi);
                        if (!isOverlap(ccur)) {
                            long score = Math.min(cur.alas, cur.tinggi);
                            if (partner.D != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.D;
                                if (partner2.C != null) {
                                    score *= Math.min(partner2.alas, partner2.tinggi);
                                    Rectangle partner3 = partner2.C;
                                }
                            }
                            if (partner.A != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.A;
                                if (partner2.C != null) {
                                    score *= Math.min(partner2.alas, partner2.tinggi);
                                    Rectangle partner3 = partner2.C;
                                }
                            }
                            //System.err.println(count + " C > " + score + " = " + partner.LX + "," + partner.LY);
                            if (score > state.score) {
                                //cur.setPosition(partner.LX - cur.alas, partner.LY - cur.tinggi);
                                cur.setPosition(ccur.LX, ccur.LY);
                                state.score = score;
                                state.node = 2;
                                state.cur = cur;
                                state.target = partner;
                            }
                        }
                    }
                    if (partner.D == null) {
                        Rectangle ccur = new Rectangle(-1, cur.alas, cur.tinggi);
                        ccur.setPosition(partner.RX, partner.LY - cur.tinggi);
                        if (!isOverlap(ccur)) {
                            long score = Math.min(cur.alas, cur.tinggi);
                            if (partner.B != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.B;
                                if (partner2.D != null) {
                                    score *= Math.min(partner.alas, partner.tinggi);
                                    Rectangle partner3 = partner2.D;
                                }
                            }
                            if (partner.C != null) {
                                score *= Math.min(partner.alas, partner.tinggi);
                                Rectangle partner2 = partner.C;
                                if (partner2.D != null) {
                                    score *= Math.min(partner.alas, partner.tinggi);
                                    Rectangle partner3 = partner2.D;
                                }
                            }
                            //System.err.println(count + " D > " + score + " = " + partner.LX + "," + partner.LY);
                            if (score > state.score) {
                                //cur.setPosition(partner.RX, partner.LY - cur.tinggi);
                                cur.setPosition(ccur.LX, ccur.LY);
                                state.score = score;
                                state.node = 3;
                                state.cur = cur;
                                state.target = partner;
                            }
                        }
                    }
                }
                temp2.add(partner);
            }

            if (state.target != null) {
                cur = state.cur;
                Rectangle partner = state.target;
                if (state.node == 0) {
                    cur.D = partner;
                    partner.A = cur;
                    if (partner.C != null) {
                        Rectangle partner2 = partner.C;
                        if (partner2.A != null) {
                            Rectangle partner3 = partner2.A;

                            if (!partner3.fixed) {
                                cur.setPosition(cur.LX, cur.LY - Math.abs(partner3.tinggi - partner.tinggi));
                                partner3.setPosition(partner3.LX + Math.abs(cur.LX - partner2.LX), partner3.LY);
                            }
                            partner3.B = cur;
                            cur.C = partner3;

                            cur.fixed = true;
                            partner.fixed = true;
                            partner2.fixed = true;
                            partner3.fixed = true;
                        }
                    }
                    if (partner.B != null) {
                        Rectangle partner2 = partner.B;
                        if (partner2.A != null) {
                            Rectangle partner3 = partner2.A;
                            partner3.C = cur;
                            cur.B = partner3;
                        }
                    }
                } else if (state.node == 1) {
                    cur.C = partner;
                    partner.B = cur;
                    if (partner.D != null) {
                        Rectangle partner2 = partner.D;
                        if (partner2.B != null) {
                            Rectangle partner3 = partner2.B;

                            if (!partner3.fixed) {
                                cur.setPosition(cur.LX, Math.min(partner3.RY, partner.RY));
                                partner3.setPosition(partner3.LX - Math.abs(cur.RX - partner2.RX), partner3.LY);
                            }

                            partner3.A = cur;
                            cur.D = partner3;

                            cur.fixed = true;
                            partner.fixed = true;
                            partner2.fixed = true;
                            partner3.fixed = true;
                        }
                    }
                    if (partner.A != null) {
                        Rectangle partner2 = partner.A;
                        if (partner2.B != null) {
                            Rectangle partner3 = partner2.B;
                            partner3.D = cur;
                            cur.A = partner3;
                        }
                    }
                } else if (state.node == 2) {
                    cur.B = partner;
                    partner.C = cur;
                    if (partner.D != null) {
                        Rectangle partner2 = partner.D;
                        if (partner2.C != null) {
                            Rectangle partner3 = partner2.C;
                            partner3.A = cur;
                            cur.D = partner3;
                        }
                    }
                    if (partner.A != null) {
                        Rectangle partner2 = partner.A;
                        if (partner2.C != null) {
                            Rectangle partner3 = partner2.C;
                            partner3.D = cur;
                            cur.A = partner3;
                        }
                    }
                } else {
                    cur.A = partner;
                    partner.D = cur;
                    if (partner.B != null) {
                        Rectangle partner2 = partner.B;
                        if (partner2.D != null) {
                            Rectangle partner3 = partner2.D;
                            partner3.C = cur;
                            cur.D = partner3;
                        }
                    }
                    if (partner.C != null) {
                        Rectangle partner2 = partner.C;
                        if (partner2.D != null) {
                            Rectangle partner3 = partner2.D;
                            partner3.B = cur;
                            cur.C = partner3;
                        }
                    }
                }

                System.err.println(cur.id + " -> " + cur.LX + "," + cur.LY);
                list.offer(cur);
                pool.addAll(temp);
                temp.clear();
                count++;
                added.add(cur);
            } else {
                System.err.println("ada yang gak bisa");
                cur.setDefault();
                temp.add(cur);
            }
            if (state.target != null) {
                for (Rectangle r : temp2) {
                    if (r.id != state.target.id) {
                        list.add(r);
                    } else {
                        list.add(state.target);
                    }
                }
            } else {
                list.addAll(temp2);
            }
        }

        int[] ret = new int[3 * A.length];
        while (!list.isEmpty()) {
            Rectangle r = list.poll();
            int id = r.id;
            ret[3 * id] = r.LX;
            ret[3 * id + 1] = r.LY;
            ret[3 * id + 2] = r.dir;
        }
        return ret;
    }

    void setupError() {
        try {
            PrintStream console = System.err;
            File file = new File("log.txt");
            FileOutputStream fos = new FileOutputStream(file);
            PrintStream ps = new PrintStream(fos);
            System.setErr(ps);
        } catch (Exception e) {
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        RectanglesAndHoles rh = new RectanglesAndHoles();
        rh.setupError();
        int N = Integer.parseInt(sc.nextLine());
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = Integer.parseInt(sc.nextLine());
        }
        int[] B = new int[N];
        for (int i = 0; i < N; i++) {
            B[i] = Integer.parseInt(sc.nextLine());
        }
        int[] ret = rh.place(A, B);

        for (int i = 0; i < 3 * N; i++) {
            System.out.println(ret[i]);
        }
        System.out.flush();
    }
}

class Rectangle implements Comparable<Rectangle> {

    int id, alas, tinggi, LX, LY, RX, RY, dir;
    Rectangle A, B, C, D;
    boolean fixed = false;

    public Rectangle(int id, int a, int b) {
        this.id = id;
        this.alas = a;
        this.tinggi = b;
    }

    void rotate() {
        dir = dir == 0 ? 1 : 0;
        alas ^= tinggi;
        tinggi ^= alas;
        alas ^= tinggi;
        setPosition(LX, LY);
    }

    void setPosition(int x, int y) {
        LX = x;
        LY = y;
        RX = LX + alas;
        RY = LY + tinggi;
    }

    void setDefault() {
        setPosition(-10000, -10000);
    }

    boolean isStand() {
        return alas < tinggi ? true : false;
    }

    @Override
    public int compareTo(Rectangle o) {
        int n1 = 0;
        if (A != null) {
            n1++;
        }
        if (B != null) {
            n1++;
        }
        if (C != null) {
            n1++;
        }
        if (D != null) {
            n1++;
        }
        int n2 = 0;
        if (o.A != null) {
            n1++;
        }
        if (o.B != null) {
            n1++;
        }
        if (o.C != null) {
            n1++;
        }
        if (o.D != null) {
            n1++;
        }
        return n1 - n2;
    }
}

class SortByRatio implements Comparator<Rectangle> {

    @Override
    public int compare(Rectangle o1, Rectangle o2) {
        return ((o2.alas * o2.tinggi) / (o2.tinggi / o2.alas)) - ((o1.alas * o1.tinggi) / (o1.tinggi / o1.alas));
    }
}

class State {

    Rectangle cur;
    Rectangle target;
    long score;
    int node;
    boolean stand = false;

    public State(Rectangle cur, Rectangle target, long score, int node) {
        this.cur = cur;
        this.target = target;
        this.score = score;
        this.node = node;
    }
}